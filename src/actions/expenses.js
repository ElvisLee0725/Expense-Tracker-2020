import uuid from 'uuid';
import database from '../firebase/firebase';

// ADD EXPENSE action generator
export const addExpense = (expense) => ({
    type: 'ADD_EXPENSE',
    expense
});

export const startAddExpense = (expenseData = {}) => {
    // Return a function to redux instead of an object. It won't work unless 'redux-thunk' package is installed
    // Fire an asynchronous call to firebase and then call dispatch()
    return (dispatch, getState) => {
        const uid = getState().auth.uid;
        const {
            description= '',
            note= '',
            amount= 0,
            createdAt= 0
        } = expenseData;

        // Push expense to firebase, then use dispatch to addExpense at Redux
        const expense = { description, note, amount, createdAt };
        // Return a promise here so we can run test
        return database.ref(`users/${uid}/expenses`).push(expense).then((ref) => {
            dispatch(addExpense({
                id: ref.key,    // Instead of using uuid, use the key generated by firebase ins
                ...expense
            }));
        });
    };
};

// EDIT EXPENSE
export const editExpense = (id, updates) => ({
    type: 'EDIT_EXPENSE',
    id,
    updates
});

export const startEditExpense = (id, updates) => {
    return (dispatch, getState) => {
        const uid = getState().auth.uid;
        return database.ref(`users/${uid}/expenses/${id}`).update(updates).then(() => {
            dispatch(editExpense(id, updates));
        });
    };
};

// REMOVE EXPENSE
export const removeExpense = ({ id } = {}) => ({
    type: 'REMOVE_EXPENSE',
    id
});

export const startRemoveExpense = ({ id } = {}) => {
    return (dispatch, getState) => {
        const uid = getState().auth.uid;
        return database.ref(`users/${uid}/expenses/${id}`).remove()
                .then(() => {
                    dispatch(removeExpense({ id }));
                });
    };
};

//SET EXPENSE
export const setExpenses = (expenses) => ({
    type: 'SET_EXPENSES',
    expenses
});

// export const startSetExpenses;
export const startSetExpenses = () => {
    return (dispatch, getState) => {
        const uid = getState().auth.uid;
        // Call firebase to get expenses, then fire dispatch() to setExpenses
        return database.ref(`users/${uid}/expenses`)
            .once('value')
            .then((snapshot) => {
                const expenses = [];
                snapshot.forEach((childSnapshot) => {
                    expenses.push({
                        id: childSnapshot.key,
                        ...childSnapshot.val()
                    });
                });
                dispatch(setExpenses(expenses));
            });        
    };  
};